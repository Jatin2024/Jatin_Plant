{"version":3,"file":"static/js/387.b5476718.chunk.js","mappings":"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","sources":["components/Popup/Popup.jsx","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // HERE IS THE iSSUE THAT THIS FUNCTION IS ALWAYS CALLED .\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n      if (type === \"Change Action\") {\r\n        let identifiers;\r\n        console.log(\"The object Type is Change Action\");\r\n        const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges`;\r\n        const response = await callEnoviaWebService(\"GET\", CAURL, \"\", headers);\r\n\r\n        console.log(\"Response from the Url is:\", response);\r\n        if (response.status && response.output) {\r\n          identifiers = response.output.proposedChanges.map(\r\n            (change) => change.where.identifier\r\n          );\r\n\r\n          console.log(\"The identifiers are: \", identifiers);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      const userGroupCollab = await getUserGroupCollab(\r\n        headers,\r\n        objectId,\r\n        email\r\n      );\r\n      console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n      let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n      console.log(\"[Use Plant Assignment] All CollabSpaces:\", allCollabSpaces);\r\n\r\n      // Step 3: Pass Combined Data to Additional Service\r\n      if (allCollabSpaces) {\r\n        const allPlants = await getAllPlants(\r\n          allCollabSpaces,\r\n          headers,\r\n          objectId\r\n        );\r\n        console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n        if (allPlants) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId\r\n          );\r\n\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          // to dispatch the plants\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no Plants\");\r\n        }\r\n      } else {\r\n        console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n      }\r\n\r\n      // Step 4: Call Remaining Independent Services\r\n      let getProductChildren = {};\r\n      console.log(\"Type Before:\", type);\r\n      if (type === \"Raw_Material\") {\r\n        getProductChildren = {\r\n          success: true,\r\n          data: [],\r\n        };\r\n      } else {\r\n        getProductChildren = await fetchProductChildren(\r\n          headers,\r\n          objectId,\r\n          type\r\n        ); // type we need here\r\n      }\r\n      console.log(\"Type After:\", type);\r\n      console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n      if (getProductChildren.success) {\r\n        dispatch(setProductChildren(getProductChildren.data));\r\n      }\r\n\r\n      const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n      console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n      if (getCaDetails.success) {\r\n        dispatch(setCAName(getCaDetails.data));\r\n        dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n      }\r\n\r\n      // Step 5: Dispatch Results to Redux\r\n\r\n      // hERE WE CAN ADD TOAST\r\n      console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n      return;\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","length","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","id","cell","_ref2","row","_jsx","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_jsxs","_Fragment","children","onClick","getRowModel","forEach","toggleSelected","style","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","SearchCA","async","flowDownCA","headers","CADetails","CAAtt","console","log","ENOVIA_BASE_URL","process","_searchResponse$chang","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","error","urlObjWAF","concat","caID","changeAction","identifier","CAUrl","CAresponse","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","title","CAState","usePlantAssignment","showErrorToast","dispatch","useDispatch","email","window","widget","getValue","handlePlantAssignment","collabSpace","objectId","setParentDetailsLoading","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","identifiers","CAURL","callEnoviaWebService","status","output","proposedChanges","change","where","userGroupCollab","_objectSpread","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","result","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","filter","members","includes","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","all","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","name","value","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","warn","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChange","action","whats","what","fetchCADetails","setCAName","setProposedChanges","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","saveData","updatedItems","classesToBeClassified","productId","AllClasses","productChilds","rowstoDelete","finalArray","fetchOOTBData","arguments","undefined","axios","NotPropagableChilds","prodChild","ErrorObj","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Finalmessage","message","every","childTitles","join","newClasses","errorItem","updateBody","MBOMName","propagateClasses","classifyUrl","classifybody","mode","classifyResponse","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse"],"sourceRoot":""}