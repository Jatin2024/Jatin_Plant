{"version":3,"file":"static/js/947.320ffeb4.chunk.js","mappings":"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","sources":["components/Modal/customModal.jsx","hooks/usePlantDropableArea.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        // const objectDetailsResult = await getDroppedObjectDetails({\r\n        //   dataItems,\r\n        // });\r\n        const objectDetailsResult = {\r\n          success: \"true\",\r\n          data: {\r\n            cardData: {\r\n              Type: \"Change Action\",\r\n              \"Maturity State\": \"Completed\",\r\n              Owner: \"Sudarshan Sambamurthy\",\r\n              \"Collaborative Space\": \"Micro Motion\",\r\n              \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n              \"Dropped Revision\": \"\",\r\n              \"Dropped Revision ID\": \"\",\r\n              \"Latest Released Revision\": \"\",\r\n              \"Latest Released Revision ID\": \"\",\r\n              EIN: \"\",\r\n              \"CAD Format\": \"\",\r\n              imageURL:\r\n                \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_ECM_CA108x144.png\",\r\n              relativePath:\r\n                \"/resources/v1/modeler/dslc/changeaction/474D00260AC21A0067CA9D1000015F59\",\r\n              Title: dataItems[0]?.displayName,\r\n              Name: dataItems[0]?.displayName,\r\n              organization: \"BU-0000001\",\r\n              \"Latest Revision\": \"-\",\r\n            },\r\n          },\r\n        };\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants?.length\r\n          ? data.ItemPlants.map((plant) => plant.PlantName).join(\", \")\r\n          : \"N/A\",\r\n      };\r\n    }\r\n\r\n    return {\r\n      Plant: data?.title || \"N/A\",\r\n      Seq: data?.Seq || \"1\",\r\n      Status: \"Current\" || \"N/A\",\r\n      \"MFG Change\": data?.MFGChange || \"N/A\",\r\n      \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n      Change: data?.Change || \"N/A\",\r\n      \"Change Status\": data?.ChangeStatus || \"N/A\",\r\n      \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n      \"ERP Status\": \"Active\" || \"N/A\",\r\n      \"ERP Export\": \"Yes\" || \"N/A\",\r\n      \"Lead Plant\": false,\r\n      MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n      \"Sort Value\": \"\",\r\n    };\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { accessorKey: \"Plant\", header: \"Plant\" },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\" },\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      cell: ({ row, getValue, table }) => {\r\n        const handleDropdownChange = (e) => {\r\n          if (!CAName) return; // Prevent changes when disabled\r\n          const updatedValue = e.target.value;\r\n\r\n          // Update the table data state here\r\n          const updatedData = table\r\n            .getRowModel()\r\n            .rows.map((r) =>\r\n              r.id === row.id\r\n                ? { ...r.original, MBom: updatedValue }\r\n                : r.original\r\n            );\r\n\r\n          table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n        };\r\n\r\n        return (\r\n          <select\r\n            value={getValue()}\r\n            onChange={handleDropdownChange}\r\n            disabled={!CAName} // Disable dropdown if CAName is false\r\n            className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n            style={{\r\n              ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n              width: \"70%\",\r\n              padding: \"5px\",\r\n              fontSize: \"14px\",\r\n              color: \"#333\",\r\n              background: \"none\",\r\n              border: \"none\",\r\n              textAlign: \"left\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n              if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n            }}\r\n            onMouseOut={(e) => {\r\n              if (CAName) e.target.style.border = \"none\";\r\n            }}\r\n          >\r\n            <option value=\"Make\">Make</option>\r\n            <option value=\"Buy\">Buy</option>\r\n          </select>\r\n        );\r\n      },\r\n    },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [AddedItem, setAddedItem] = useState([]);\r\n  const [addedItemData, setAddedItemData] = useState([]);\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  // useEffect(() => {\r\n  //   onAddPlant(addedItemData);\r\n  //   console.log(\"Data Passed\");\r\n  //   // addedPlant(AddedItem);\r\n  // }, [addedItemData]);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    setAddedItem(data);\r\n    if (data.length > 0) {\r\n      const newItems = data.map((title) => ({\r\n        title: title, // Use the title as Plant (or replace with actual data)\r\n        Seq: \"1\",\r\n        Status: \"Current\",\r\n        \"MFG Change\": \"N/A\",\r\n        \"MFG Status\": \"N/A\",\r\n        Change: \"N/A\",\r\n        \"Change Status\": \"N/A\",\r\n        \"Oracle Template\": \"N/A\",\r\n        \"ERP Status\": \"Active\",\r\n        \"ERP Export\": \"Yes\",\r\n        \"Lead Plant\": \"false\",\r\n        MBom: \"Buy\",\r\n        \"Sort Value\": \"\",\r\n      }));\r\n      onAddPlant(newItems);\r\n      setAddedItemData(newItems);\r\n      addedPlant(data);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   // if (AddedItem.length > 0) {\r\n  //   //   const newItems = AddedItem.map((title) => ({\r\n  //   //     title: title, // Use the title as Plant (or replace with actual data)\r\n  //   //     Seq: \"1\",\r\n  //   //     Status: \"Current\",\r\n  //   //     MFG_Change: \"\",\r\n  //   //     MFG_Status: \"\",\r\n  //   //     Change: \"\",\r\n  //   //     Change_Status: \"\",\r\n  //   //     Oracle_Template: \"\",\r\n  //   //     \"ERP Status\": \"Active\",\r\n  //   //     \"ERP Export\": \"Yes\",\r\n  //   //     \"Lead Plant\": \"false\",\r\n  //   //     MBom: \"Buy\",\r\n  //   //     \"Sort Value\": \"\",\r\n  //   //   }));\r\n  //   //   onAddPlant(newItems);\r\n  //   //   setAddedItemData(newItems);\r\n  //   //   addedPlant(AddedItem);\r\n  //   // }\r\n  // }, [AddedItem]);\r\n\r\n  console.log(\"Added item data:\", addedItemData);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={() => {\r\n            if (CAName) {\r\n              setAddPlantPopup(true); // Open the modal if CAName is present\r\n            } else if (state === \"RELEASED\") {\r\n              showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n            } else {\r\n              showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n            }\r\n          }}\r\n        >\r\n          Add Plant\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata}\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport { clearAllListeners } from \"@reduxjs/toolkit\";\r\nimport { faClipboardQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [addedDataFromToolbar, setAddedDataFromToolbar] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n\r\n    setScreenLoader(true);\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    console.log(\"Selected Table Rows:\", selectedTableRows);\r\n    console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n    if (selectedTableRows.length > 0) {\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n\r\n      // // Filter out selected rows from assignedPlant and update tableData\r\n      // const updatedAssignedPlant = assignedPlant.filter(\r\n      //   (row) => !selectedTitles.includes(row.title)\r\n      // );\r\n      // console.log(\"Updated Assigned Plant:\", updatedAssignedPlant);\r\n\r\n      // Extract filtered-out rows to add them back to uniqueData\r\n      // const removedPlants = assignedPlant.filter((row) =>\r\n      //   selectedTitles.includes(row.title)\r\n      // );\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n    } else {\r\n      alert(\"Please select at least one row to remove.\");\r\n    }\r\n  };\r\n\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\");\r\n    setAddedDataFromToolbar(data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    setTableData((prev) => [\r\n      ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n      ...prev,\r\n    ]);\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  };\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // NGetting the CA dETAILS FROM rEDUX\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemDetails\r\n  );\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n  useEffect(() => {\r\n    setUniqueData(uniquePlant);\r\n  }, [uniquePlant]);\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    setAssignedPlant(asignedPlant);\r\n  }, [asignedPlant]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetails, type)\r\n      : getTableData(assignedPlant, type);\r\n  }, [CAItemDetails, assignedPlant, type]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // useEffect(() => {\r\n  //   if (addedDataFromToolbar.length > 0) {\r\n  //     console.log(\"[Plant Assignment] Table data\", tableData);\r\n  //     console.log(\"Added Data from Toolbar\", addedDataFromToolbar);\r\n  //     setAssignedPlant((prev) => [...addedDataFromToolbar, ...prev]);\r\n  //     setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  //   }\r\n  // }, [addedDataFromToolbar]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(() => tableColumns(CAName, type), [CAName, type]);\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n  const handleFileChange = (event) => {\r\n    setSelectedFiles(event.target.files.length > 0 ? event.target.files : null);\r\n  };\r\n  const handleSubmit = () => {\r\n    if (selectedFiles) {\r\n      console.log(\"Files submitted:\", selectedFiles);\r\n      // Add your submit logic here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control type=\"file\" multiple onChange={handleFileChange} />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={handleSubmit}\r\n              style={{\r\n                cursor: !selectedFiles ? \"not-allowed\" : \"pointer\",\r\n                opacity: !selectedFiles ? 0.5 : 1, // Optional: makes the button look disabled\r\n              }}\r\n            >\r\n              Create Manufacturing CA\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  data={tableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","show","onHide","title","children","footerButtons","_jsxs","Modal","size","centered","_jsx","Header","closeButton","Title","Body","Footer","map","btn","index","Button","variant","onClick","label","usePlantDropableArea","showErrorToast","useToast","handlePlantAssignment","usePlantAssignment","isDropped","useSelector","state","droppedObject","loading","dispatch","useDispatch","fetchObjectDetails","useCallback","async","_dataItems$","_dataItems$2","objectDetailsResult","success","data","cardData","Type","Owner","EIN","imageURL","relativePath","dataItems","displayName","Name","organization","setDroppedObjectData","draggedObjectData","_dataItems$3","_dataItems$4","console","log","setIsDroppedAction","objectId","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","error","setLoading","handleDrop","length","_dataItems$5","includes","MSG_INVALID_OBJECT_TYPE","setTimeout","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","getTableData","tableData","type","_data$ItemPlants","ItemName","ItemTitle","Plant","ItemPlants","plant","PlantName","join","Seq","Status","MFGChange","MFGStatus","Change","ChangeStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","CAName","showWarningToast","AddedItem","setAddedItem","addedItemData","setAddedItemData","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","_Fragment","className","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","PlantAssignment","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","addedDataFromToolbar","setAddedDataFromToolbar","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","selectedTableRows","CAItemDetails","loadingParentDetails","proposedChanges","plantObjectData","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","updateTableData","updatedData","prevKey","_droppedObjectData$in","_droppedObjectData$in2","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in3","_droppedObjectData$in4","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","_objectSpread","forEach","tableItem","_allPlants$find","finalObj","plantName","replace","classid","find","classitem","test","concat","MBOMName","MBOMValue","push","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","filter","result","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","cursor","position","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","top","background","border","fontSize","color","FaRegCopy","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","Object","keys","response","errorObj","item","processErrorObj","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","owner","Description","getCardData","tableColumns","cell","row","getValue","table","value","onChange","e","_table$options$meta","updatedValue","target","getRowModel","rows","r","original","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","display","flexDirection","justifyContent","bottom","left","transform","zIndex","gap","alignItems","Form","Group","controlId","Control","multiple","event","files","handleSubmit","opacity","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","widgetType","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}