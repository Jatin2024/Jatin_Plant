{"version":3,"file":"static/js/387.39deb8e1.chunk.js","mappings":"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","sources":["components/Popup/Popup.jsx","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                const ItemId = change.where.identifier;\r\n                const ItemType = change.where.type;\r\n\r\n                try {\r\n                  const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    getAssignedClasses(ItemId, headers),\r\n                    getItemDetails(ItemId, ItemType, headers),\r\n                  ]);\r\n\r\n                  ItemDetails.push({\r\n                    ItemId,\r\n                    ItemType,\r\n                    ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                    ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                    ItemPlants,\r\n                  });\r\n                } catch (err) {\r\n                  console.error(\r\n                    `Error processing change for item ${ItemId}:`,\r\n                    err\r\n                  );\r\n                }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(collabSpace, headers, objectId);\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both functions in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n\r\n        return;\r\n      }\r\n\r\n      // Step 1: Fetch user group collaboration spaces\r\n      const userGroupCollab = await getUserGroupCollab(\r\n        headers,\r\n        objectId,\r\n        email\r\n      );\r\n      console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n      let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n      console.log(\"[Use Plant Assignment] All CollabSpaces:\", allCollabSpaces);\r\n\r\n      // Step 2: Fetch all plants if collab spaces exist\r\n      let allPlants = [];\r\n      if (allCollabSpaces.length > 0) {\r\n        allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n      } else {\r\n        console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n      }\r\n\r\n      // Step 3: Fetch assigned plants if there are any\r\n      if (allPlants.length > 0) {\r\n        const plants = await fetchAssignedPlants(allPlants, headers, objectId);\r\n        console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n        if (plants.success) {\r\n          dispatch(setPlantObjectData(plants.data.plantData));\r\n          dispatch(setHeaders(headers));\r\n        } else {\r\n          console.error(\"Failed to fetch plant data.\");\r\n        }\r\n      } else {\r\n        console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n      }\r\n\r\n      // Step 4: Fetch Product Children based on type\r\n      let getProductChildren = {};\r\n      if (type === \"Raw_Material\") {\r\n        getProductChildren = { success: true, data: [] };\r\n      } else {\r\n        getProductChildren = await fetchProductChildren(\r\n          headers,\r\n          objectId,\r\n          type\r\n        );\r\n      }\r\n\r\n      console.log(\"Type After:\", type);\r\n      console.log(\r\n        \"[Use Plant Assignment] Product Children:\",\r\n        getProductChildren\r\n      );\r\n\r\n      if (getProductChildren.success) {\r\n        dispatch(setProductChildren(getProductChildren.data));\r\n      }\r\n\r\n      // Step 5: Fetch Change Action details\r\n      const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n      console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n      if (getCaDetails.success) {\r\n        dispatch(setCAName(getCaDetails.data));\r\n        dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n      }\r\n\r\n      console.log(\"[Plant Assignment] All services executed successfully.\");\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = []; // Declare plantIdData locally within the function\r\n\r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n\r\n    // Check for valid data\r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n\r\n          // Loop through each attribute in the classification\r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantIdData.push({\r\n                PlantName: attribute.value,\r\n                PlantID: classId,\r\n              });\r\n            }\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n\r\n  return plantIdData;\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","length","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","id","cell","_ref2","row","_jsx","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_jsxs","_Fragment","children","onClick","getRowModel","forEach","toggleSelected","style","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","getAllPlants","async","allCollabSpaces","headers","objectId","ENOVIA_BASE_URL","process","UserGroupClasses","console","log","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","error","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","concat","collabSpace","libraryId","member","find","title","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","filter","plant","some","userClass","all","SearchCA","flowDownCA","CADetails","CAAtt","_searchResponse$chang","urlObjWAF","caID","changeAction","identifier","CAUrl","CAresponse","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","CAState","usePlantAssignment","showErrorToast","dispatch","useDispatch","email","window","widget","getValue","handlePlantAssignment","setParentDetailsLoading","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","fetchChangeActionData","CAURL","callEnoviaWebService","status","output","changeProcessingPromises","proposedChanges","ItemId","change","where","ItemType","ItemPlants","Iteminfo","getAssignedClasses","getItemDetails","ItemState","ItemTitle","err","CAAllPlantsData","allPlants","setCAAllPlants","setCAItemDetails","userGroupCollab","_objectSpread","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","result","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","members","includes","getUserGroupCollab","warn","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","name","value","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChange","action","whats","what","fetchCADetails","setCAName","setProposedChanges","plantIdData","itemResponse","classId","attribute","PlantID","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","saveData","updatedItems","classesToBeClassified","productId","AllClasses","productChilds","rowstoDelete","finalArray","fetchOOTBData","arguments","undefined","axios","NotPropagableChilds","prodChild","ErrorObj","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Finalmessage","message","every","childTitles","join","newClasses","errorItem","updateBody","MBOMName","propagateClasses","classifyUrl","classifybody","mode","classifyResponse","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse"],"sourceRoot":""}