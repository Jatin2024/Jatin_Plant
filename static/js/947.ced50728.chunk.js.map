{"version":3,"file":"static/js/947.ced50728.chunk.js","mappings":"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","sources":["components/Modal/customModal.jsx","hooks/usePlantDropableArea.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       Type: \"Change Action\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       Owner: \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Dropped Revision\": \"\",\r\n        //       \"Dropped Revision ID\": \"\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       EIN: \"\",\r\n        //       \"CAD Format\": \"\",\r\n        //       imageURL:\r\n        //         \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_ECM_CA108x144.png\",\r\n        //       relativePath:\r\n        //         \"/resources/v1/modeler/dslc/changeaction/474D00260AC21A0067CA9D1000015F59\",\r\n        //       Title: dataItems[0]?.displayName,\r\n        //       Name: dataItems[0]?.displayName,\r\n        //       organization: \"BU-0000001\",\r\n        //       \"Latest Revision\": \"-\",\r\n        //     },\r\n        //   },\r\n        // };\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: \"Current\" || \"N/A\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || \"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || \"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\" },\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      cell: ({ row, getValue, table }) => {\r\n        const handleDropdownChange = (e) => {\r\n          if (!CAName) return; // Prevent changes when disabled\r\n          const updatedValue = e.target.value;\r\n\r\n          // Update the table data state here\r\n          const updatedData = table\r\n            .getRowModel()\r\n            .rows.map((r) =>\r\n              r.id === row.id\r\n                ? { ...r.original, MBom: updatedValue }\r\n                : r.original\r\n            );\r\n\r\n          table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n        };\r\n\r\n        return (\r\n          <select\r\n            value={getValue()}\r\n            onChange={handleDropdownChange}\r\n            disabled={!CAName} // Disable dropdown if CAName is false\r\n            className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n            style={{\r\n              ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n              width: \"70%\",\r\n              padding: \"5px\",\r\n              fontSize: \"14px\",\r\n              color: \"#333\",\r\n              background: \"none\",\r\n              border: \"none\",\r\n              textAlign: \"left\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n              if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n            }}\r\n            onMouseOut={(e) => {\r\n              if (CAName) e.target.style.border = \"none\";\r\n            }}\r\n          >\r\n            <option value=\"Make\">Make</option>\r\n            <option value=\"Buy\">Buy</option>\r\n          </select>\r\n        );\r\n      },\r\n    },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Current\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: \"N/A\",\r\n          \"Change Status\": \"N/A\",\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"Buy\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              setAddPlantPopup(true);\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n\r\n    setScreenLoader(true);\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode(true); // Keeps remove mode active\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n      } else {\r\n        alert(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.filter(\r\n                  (plant) => plant.PlantID !== plantId\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          let existingPlants = row.ItemPlants || [];\r\n\r\n          // ✅ Extract existing plant names from **Redux** state\r\n          const reduxExistingPlants = new Set(\r\n            CAItemDetails.flatMap((item) => item.ItemPlants || []).map((p) =>\r\n              p.PlantName.trim()\r\n            )\r\n          );\r\n\r\n          // ✅ Extract already added plant names from **current table state**\r\n          const currentSessionPlants = new Set(\r\n            existingPlants.map((p) => p.PlantName.trim())\r\n          );\r\n\r\n          // Process each new plant from the popup\r\n          const newPlants = data\r\n            .map((plantName) => {\r\n              const matchedPlant = CAAllPlants.find((plant) => {\r\n                const formattedTitle = plant.title\r\n                  .replace(/^Plant\\s+/, \"\")\r\n                  .trim();\r\n                return formattedTitle === plantName.trim();\r\n              });\r\n\r\n              if (!matchedPlant) return null; // Skip if no match found\r\n\r\n              const isInRedux = reduxExistingPlants.has(plantName.trim());\r\n              const isInSession = currentSessionPlants.has(plantName.trim());\r\n\r\n              return {\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                ...(isMFGCA &&\r\n                  !isInRedux && { color: isInSession ? undefined : \"green\" }),\r\n                // ✅ No color for Redux data\r\n                // ✅ Green for newly added plants\r\n                // ✅ If already in session, no color change (prevents duplicates from becoming green again)\r\n              };\r\n            })\r\n            .filter(Boolean); // Remove null values\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...existingPlants, ...newPlants], // Merge existing with new\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setTableData((prev) => [\r\n        ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n        ...prev,\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return isMFGCA\r\n      ? allPlants.map((plant) => ({ title: plant }))\r\n      : uniqueTablePlants;\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    } else {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [getUniquePlant, uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type)\r\n      : getTableData(assignedPlant, type);\r\n  }, [CAItemDetailsTable, assignedPlant, type]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n  const handleFileChange = (event) => {\r\n    setSelectedFiles(event.target.files.length > 0 ? event.target.files : null);\r\n  };\r\n  const handleSubmit = () => {\r\n    if (selectedFiles) {\r\n      console.log(\"Files submitted:\", selectedFiles);\r\n      // Add your submit logic here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control type=\"file\" multiple onChange={handleFileChange} />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={handleSubmit}\r\n              style={{\r\n                cursor: !selectedFiles ? \"not-allowed\" : \"pointer\",\r\n                opacity: !selectedFiles ? 0.5 : 1, // Optional: makes the button look disabled\r\n              }}\r\n            >\r\n              Create Manufacturing CA\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","show","onHide","title","children","footerButtons","_jsxs","Modal","size","centered","_jsx","Header","closeButton","Title","Body","Footer","map","btn","index","Button","variant","onClick","label","usePlantDropableArea","showErrorToast","useToast","handlePlantAssignment","usePlantAssignment","isDropped","useSelector","state","droppedObject","loading","dispatch","useDispatch","fetchObjectDetails","useCallback","async","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","data","draggedObjectData","_dataItems$","_dataItems$2","console","log","setIsDroppedAction","objectId","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","error","setLoading","handleDrop","length","_dataItems$3","includes","MSG_INVALID_OBJECT_TYPE","setTimeout","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","_Fragment","plant","style","marginRight","display","alignItems","color","fontWeight","PlantName","AiOutlineClose","cursor","marginLeft","PlantID","getTableData","tableData","type","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Seq","Status","MFGChange","MFGStatus","Change","ChangeStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","CAName","isMFGCA","showWarningToast","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","className","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","PlantAssignment","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","securityContext1","getValue","plantId","item","_objectSpread","filter","selectedTableRows","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","updateTableData","updatedData","prevKey","_droppedObjectData$in","_droppedObjectData$in2","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in3","_droppedObjectData$in4","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","forEach","tableItem","_allPlants$find","finalObj","plantName","classid","find","classitem","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","result","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","cell","_ref2","row","original","_ref3","table","value","onChange","e","_table$options$meta","updatedValue","target","getRowModel","rows","r","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","flexDirection","justifyContent","bottom","left","transform","zIndex","gap","Form","Group","controlId","Control","multiple","event","files","handleSubmit","opacity","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","existingPlants","reduxExistingPlants","currentSessionPlants","newPlants","matchedPlant","isInRedux","has","isInSession","undefined","Boolean","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","widgetType","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}