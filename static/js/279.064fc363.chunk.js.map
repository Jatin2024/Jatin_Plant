{"version":3,"file":"static/js/279.064fc363.chunk.js","mappings":"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","sources":["components/Modal/customModal.jsx","components/Popup/Popup.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: \"Current\" || \"N/A\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || \"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || \"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\" },\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      cell: ({ row, getValue, table }) => {\r\n        const handleDropdownChange = (e) => {\r\n          if (!CAName) return; // Prevent changes when disabled\r\n          const updatedValue = e.target.value;\r\n\r\n          // Update the table data state here\r\n          const updatedData = table\r\n            .getRowModel()\r\n            .rows.map((r) =>\r\n              r.id === row.id\r\n                ? { ...r.original, MBom: updatedValue }\r\n                : r.original\r\n            );\r\n\r\n          table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n        };\r\n\r\n        return (\r\n          <select\r\n            value={getValue()}\r\n            onChange={handleDropdownChange}\r\n            disabled={!CAName} // Disable dropdown if CAName is false\r\n            className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n            style={{\r\n              ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n              width: \"70%\",\r\n              padding: \"5px\",\r\n              fontSize: \"14px\",\r\n              color: \"#333\",\r\n              background: \"none\",\r\n              border: \"none\",\r\n              textAlign: \"left\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n              if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n            }}\r\n            onMouseOut={(e) => {\r\n              if (CAName) e.target.style.border = \"none\";\r\n            }}\r\n          >\r\n            <option value=\"Make\">Make</option>\r\n            <option value=\"Buy\">Buy</option>\r\n          </select>\r\n        );\r\n      },\r\n    },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Current\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: \"N/A\",\r\n          \"Change Status\": \"N/A\",\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"Buy\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              setAddPlantPopup(true);\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const { response, payload } = getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = payload.Items.map((item) => ({\r\n            ItemId: item.ItemId,\r\n            ItemType: item.ItemType,\r\n            ItemState: item.ItemState,\r\n            ItemTitle: item.ItemTitle,\r\n            ItemPlants: item.ItemPlants.map(({ PlantName, PlantID }) => ({\r\n              PlantName,\r\n              PlantID,\r\n            })),\r\n          }));\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode(true); // Keeps remove mode active\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n      } else {\r\n        alert(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.filter(\r\n                  (plant) => plant.PlantID !== plantId\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setTableData((prev) => [\r\n        ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n        ...prev,\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return isMFGCA\r\n      ? allPlants.map((plant) => ({ title: plant }))\r\n      : uniqueTablePlants;\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type)\r\n      : getTableData(assignedPlant, type);\r\n  }, [CAItemDetailsTable, assignedPlant, type]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n  const handleFileChange = (event) => {\r\n    setSelectedFiles(event.target.files.length > 0 ? event.target.files : null);\r\n  };\r\n  const handleSubmit = () => {\r\n    if (selectedFiles) {\r\n      console.log(\"Files submitted:\", selectedFiles);\r\n      // Add your submit logic here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control type=\"file\" multiple onChange={handleFileChange} />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={handleSubmit}\r\n              style={{\r\n                cursor: !selectedFiles ? \"not-allowed\" : \"pointer\",\r\n                opacity: !selectedFiles ? 0.5 : 1, // Optional: makes the button look disabled\r\n              }}\r\n            >\r\n              Create Manufacturing CA\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    // const response = await fetchData(\"POST\", SaveURL, payload);\r\n    const response = true;\r\n\r\n    return {\r\n      response,\r\n      payload,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["_ref","show","onHide","title","children","footerButtons","_jsxs","Modal","size","centered","_jsx","Header","closeButton","Title","Body","Footer","map","btn","index","Button","variant","onClick","label","forwardRef","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","length","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","id","cell","_ref2","row","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_Fragment","getRowModel","forEach","toggleSelected","style","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","loading","setLoading","console","log","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","items","error","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","color","fontWeight","PlantName","AiOutlineClose","cursor","marginLeft","PlantID","getTableData","tableData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Seq","Status","MFGChange","MFGStatus","Change","ChangeStatus","OracleTemplate","MBom","MBOM","uniqueColumns","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","_availablePlantRef$cu","current","AvailablePlant","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","PlantAssignment","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","securityContext1","getValue","useCallback","plantId","_objectSpread","filter","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in","_droppedObjectData$in2","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in3","_droppedObjectData$in4","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find","finalObj","plantName","classid","find","classitem","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","_ref3","value","e","_table$options$meta","updatedValue","target","r","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","flexDirection","justifyContent","bottom","left","transform","zIndex","gap","Form","Group","controlId","Control","multiple","event","files","handleSubmit","opacity","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemDetails","CAheaders","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","prev","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","payload","getSaveDataForManufacturingCA","updatedCADetails","Items","ItemType","ItemState","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","_droppedObjectData$in5","_droppedObjectData$in6","_droppedObjectData$in7","objectData","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","caDetails","ca","_excluded2","PlantType","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","querySelector","document","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","initialAssignedClasses","productId","AllClasses","productChilds","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","url","method","JSON","stringify","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","fetchData","arguments","undefined","axios","NotPropagableChilds","prodChild","toLowerCase","change","identifier","action","prodchilds","notPropagableChild","classes","childId","childName","name","childs","message","Array","isArray","every","child","childTitles","newClasses","errorItem","updateBody","propagateClasses","classifyUrl","classifybody","classifyResponse","_response$member$","nextApiUrl","cestamp","member","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse"],"sourceRoot":""}